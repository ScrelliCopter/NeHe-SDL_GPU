source_dir = "src/rust"
file_extension = "rs"

[condition.depth]
appconfig_depthfmt = "\tconst CREATE_DEPTH_BUFFER: SDL_GPUTextureFormat = $depth_format;\n"
depth_info_ref = "&depth_info"
lesson1_draw_ctx = "ctx"
lesson_struct_depth = """
		let mut depth_info = SDL_GPUDepthStencilTargetInfo::default();
		depth_info.texture          = ctx.depth_texture;
		depth_info.clear_depth      = 1.0;
		depth_info.load_op          = SDL_GPU_LOADOP_CLEAR;
		depth_info.store_op         = SDL_GPU_STOREOP_DONT_CARE;
		depth_info.stencil_load_op  = SDL_GPU_LOADOP_DONT_CARE;
		depth_info.stencil_store_op = SDL_GPU_STOREOP_DONT_CARE;
		depth_info.cycle            = true;
"""

[condition.-depth]
rust_import_null = "\nuse std::ptr::null;"
depth_info_ref = "null()"
lesson1_draw_ctx = "_ctx"

[condition.projection]
rust_import_mtx = "\nuse nehe::matrix::Mtx;"
rust_import_max = "\nuse std::cmp::max;"
lesson_definitions = """

{
	projection: Mtx,
}
"""
lesson_func_resize = """

	fn resize(&mut self, _ctx: &NeHeContext, width: i32, height: i32)
	{
		let aspect = width as f32 / max(height, 1) as f32;
		self.projection = Mtx::perspective(45.0, aspect, 0.1, 100.0);
	}
"""

[condition.-projection]
lesson_definitions = ";"

[condition.key]
rust_import_keycode = "\nuse sdl3_sys::keycode::SDL_Keycode;"
lesson_func_key = """


	fn key(&mut self, _ctx: &NeHeContext, key: SDL_Keycode, down: bool, repeat: bool)
    {
		match key
		{
			_ => ()
		}
	}"""
