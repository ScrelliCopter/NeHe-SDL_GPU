source_dir = "src/rust"
file_extension = "rs"
globals = "\n{\n$fields\n}"
global_field = "\t$label: $field_type,"
empty_globals_semicolon = true
appconfig_depthfmt = "\tconst CREATE_DEPTH_BUFFER: SDL_GPUTextureFormat = $depth_format;\n"
depth_info_ref = "&depth_info"
null = "null()"
struct_depth = """
		let mut depth_info = SDL_GPUDepthStencilTargetInfo::default();
		depth_info.texture          = ctx.depth_texture;
		depth_info.clear_depth      = 1.0;
		depth_info.load_op          = SDL_GPU_LOADOP_CLEAR;
		depth_info.store_op         = SDL_GPU_STOREOP_DONT_CARE;
		depth_info.stencil_load_op  = SDL_GPU_LOADOP_DONT_CARE;
		depth_info.stencil_store_op = SDL_GPU_STOREOP_DONT_CARE;
		depth_info.cycle            = true;
"""
func_resize_projection = """
	fn resize(&mut self, _ctx: &NeHeContext, width: i32, height: i32)
	{
		let aspect = width as f32 / max(height, 1) as f32;
		self.projection = Mtx::perspective(45.0, aspect, 0.1, 100.0);
	}
"""
func_keys = """

	fn key(&mut self, _ctx: &NeHeContext, key: SDL_Keycode, down: bool, repeat: bool)
    {
		match key
		{
			_ => ()
		}
	}"""

[condition.key]
rust_import_keycode = "\nuse sdl3_sys::keycode::SDL_Keycode;"

[condition.projection]
rust_import_mtx = "\nuse nehe::matrix::Mtx;"
rust_import_max = "\nuse std::cmp::max;"
