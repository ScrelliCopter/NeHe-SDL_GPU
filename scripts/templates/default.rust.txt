/*
 * SPDX-FileCopyrightText: $copyright_text
 * SPDX-License-Identifier: $copyright_license
 */

use nehe::application::config::AppImplementation;
use nehe::application::run;
use nehe::context::NeHeContext;
use nehe::error::NeHeError;$rust_import_mtx
use sdl3_sys::gpu::*;$rust_import_keycode
use sdl3_sys::pixels::SDL_FColor;$rust_import_max
use std::process::ExitCode;
use std::ptr::null;

#[derive(Default)]
struct Lesson${lesson_num}$lesson_definitions

impl AppImplementation for Lesson${lesson_num}
{
	const TITLE: &'static str = "$lesson_title";
	const WIDTH: i32 = 640;
	const HEIGHT: i32 = 480;
$appconfig_depthfmt
	fn init(&mut self, ctx: &NeHeContext) -> Result<(), NeHeError>
	{
		

		Ok(())
	}

	fn quit(&mut self, ctx: &NeHeContext)
	{
		
	}
$lesson_func_resize
	fn draw(&mut self, _ctx: &NeHeContext, cmd: *mut SDL_GPUCommandBuffer, swapchain: *mut SDL_GPUTexture)
	{
		let mut color_info = SDL_GPUColorTargetInfo::default();
		color_info.texture     = swapchain;
		color_info.clear_color = SDL_FColor { r: 0.0, g: 0.0, b: 0.0, a: 0.5 };
		color_info.load_op     = SDL_GPU_LOADOP_CLEAR;
		color_info.store_op    = SDL_GPU_STOREOP_STORE;
$lesson_struct_depth
		unsafe
		{
			let pass = SDL_BeginGPURenderPass(cmd, &color_info, 1, $lesson_pass_depth);

			

			SDL_EndGPURenderPass(pass);
		}
	}$lesson_func_key
}

pub fn main() -> Result<ExitCode, Box<dyn std::error::Error>>
{
	run::<Lesson$lesson_num>()?;
	Ok(ExitCode::SUCCESS)
}
